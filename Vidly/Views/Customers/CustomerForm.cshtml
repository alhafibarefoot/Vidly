@model Vidly.ViewModels.CustomerFormViewModel
@{
    ViewBag.Title = "New";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>New Customer</h2>

@using (Html.BeginForm("Save", "Customers"))
{
    @*@Html.ValidationSummary()*@
    @Html.ValidationSummary(true, "Please fix the following errors.")  @*Exciplit default ValidationSummary*@
    <div class="form-group">
        @Html.LabelFor(m => m.Customer.Name)
        @Html.TextBoxFor(m => m.Customer.Name, new { @class = "form-control" }) 
        @Html.ValidationMessageFor(m => m.Customer.Name)
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.Customer.MembershipTypeId)
        @Html.DropDownListFor(m => m.Customer.MembershipTypeId, new SelectList(Model.MembershipTypes, "Id", "Name"), "Select Membership Type", new { @class = "form-control" })
        @Html.ValidationMessageFor(m => m.Customer.MembershipTypeId)
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.Customer.Birthdate)  
        @Html.TextBoxFor(m => m.Customer.Birthdate, "{0:dd/MM/yyyy}", new { @class = "form-control" }) 
        @Html.ValidationMessageFor(m => m.Customer.Birthdate)
    </div>
  
    

    

    <div class="checkbox">
      
        <label>
            @Html.CheckBoxFor(m => m.Customer.IsSubscribedToNewsletter) Subscribed to Newsletter?
        </label>
    </div>


    @Html.HiddenFor(m => m.Customer.Id) 
    @Html.AntiForgeryToken()
    //Anti Forgery key
    //if we use chrome-network - save we found all value passed throught post so if client leave active session open some Mlaecios page
    //  Hacker can post any thing post / customer / save to our application by  CSRF = Cross Site Request Forgery
    //        So to check all post come from our site we add before submit or save @Html.AntiForgeryToken()
    //so if we check chrome-network - save we found hidden value in _RequestValidationTocken cockie value = long encrepting string
    //if this _RequestValidationTocken & value not match in CustomersControler on save action[ValidateAntiForgeryToken] So it a hack


    <button type="submit" class="btn btn-primary">Save</button>

}

@section scripts
{
    @Scripts.Render("~/bundles/jqueryval")  
    @*This enabling Client Side Validation jqueryval in appstart/BundleConfig before no referance in any view..here we use it *@

    @*client side validation benifit 1)Immidiate Feed back 2)No waste server resources*@ 
    @*if in chrome-network you will not find netwrok activity for CustomerForm all happen in client and it faster*@
    @*without enabling client side it take source from server by data annotation +  client by razor view*@
}